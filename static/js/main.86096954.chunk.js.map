{"version":3,"sources":["components/Wrapper.js","components/Header.js","components/Content.js","Context.js","components/WeatherSearch.js","components/WeatherData.js","components/Error.js","components/Tagline.js","components/DateTime.js","components/Footer.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Header","Content","Context","createContext","WeatherSearch","api_call","useContext","onSubmit","name","autoComplete","type","WeatherData","weather","city","temp","humidity","pressure","Error","error","Tagline","DateTime","date","Date","toLocaleDateString","toLocaleTimeString","Footer","Main","useState","setWeather","setCity","setError","e","a","preventDefault","API_KEY","location","target","elements","value","url","axios","get","response","data","main","Provider","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qNAUeA,G,MARC,SAACC,GACb,OACI,yBAAKC,UAAU,WACbD,EAAME,Y,+BCKDC,EARA,kBACP,yBAAKF,UAAU,UACZ,yBAAKA,UAAU,iBAAf,qBCIIG,EANC,SAACJ,GAAD,OACR,yBAAKC,UAAU,WACVD,EAAME,WCDJG,EADCC,0BCcDC,EAbO,SAACP,GAAW,IACnBQ,EAAYC,qBAAWJ,GAAvBG,SAER,OAAO,yBAAKP,UAAU,kBACtB,0BAAMS,SAAUF,EAAUP,UAAU,wBAClC,2BAAOU,KAAK,WAAWC,aAAa,MAAMX,UAAU,wBAAwBY,KAAK,SACjF,yBAAKZ,UAAU,0BACb,4BAAQA,UAAU,0BAAlB,c,iBCkBIa,EAzBK,WAAO,IAAD,EACKL,qBAAWJ,GAA9BU,EADc,EACdA,QAAUC,EADI,EACJA,KACVC,EAA6BF,EAA7BE,KAAMC,EAAuBH,EAAvBG,SAAUC,EAAaJ,EAAbI,SAExB,OAAO,oCACH,yBAAKlB,UAAU,gBACf,uBAAGA,UAAU,oBAAb,wBAAqD,0BAAMA,UAAU,sBAAsBe,IAC3F,yBAAKf,UAAU,qBACX,0BAAMA,UAAU,0BAChB,uBAAGA,UAAU,uBAAb,eACA,uBAAGA,UAAU,uBAAuBgB,IAEpC,0BAAMhB,UAAU,0BAChB,uBAAGA,UAAU,uBAAb,YACA,uBAAGA,UAAU,uBAAuBiB,IAEpC,0BAAMjB,UAAU,0BAChB,uBAAGA,UAAU,uBAAb,YACA,uBAAGA,UAAU,uBAAuBkB,QCfjCC,EAJD,SAAC,GAAY,IAAXC,EAAU,EAAVA,MACZ,OAAO,6BAAMA,ICGFC,EAJC,WACZ,OAAO,kECSIC,EAVE,WACb,IAAMC,EAAO,IAAIC,KAEjB,OACI,yBAAKxB,UAAU,aAAf,UACKuB,EAAKE,qBADV,cACoCF,EAAKG,wBCElCC,EAPA,WACX,OAAO,yBAAK3B,UAAU,UAClB,uECwCO4B,EAhCF,WAAM,IAAD,EACgBC,qBADhB,mBACPf,EADO,KACEgB,EADF,OAEYD,qBAFZ,mBAENd,EAFM,KAEAgB,EAFA,OAGcF,qBAHd,mBAGNT,EAHM,KAGCY,EAHD,KAKRzB,EAAQ,uCAAG,WAAO0B,GAAP,qBAAAC,EAAA,yDACbD,EAAEE,iBACIC,EAAQ,mCACRC,EAAWJ,EAAEK,OAAOC,SAASF,SAASG,MAH/B,0CAIQR,EAAS,kEAA+CF,EAAW,QAJ3E,cAKPW,EALO,4DAKoDJ,EALpD,kBAKsED,EALtE,0BAMUM,IAAMC,IAAIF,GANpB,OAMPG,EANO,OAObd,EAAWc,EAASC,KAAKC,MACzBf,EAAQa,EAASC,KAAKnC,MACtBsB,EAAS,MATI,4CAAH,sDAYd,OAAO,yBAAKhC,UAAU,QACd,kBAAC,EAAD,MACA,kBAAC,EAAD,KACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACG,kBAAC,EAAQ+C,SAAT,CAAkBP,MAAO,CAAEjC,WAAUO,UAASC,SAC9C,kBAAC,EAAD,MACED,GAAW,kBAAC,EAAD,MACXM,GAAS,kBAAC,EAAD,CAAOA,MAAOA,KAEzB,kBAAC,EAAD,SC1BA4B,MARf,WACE,OACC,kBAAC,EAAD,KACE,kBAAC,EAAD,QCIeC,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,c","file":"static/js/main.86096954.chunk.js","sourcesContent":["import React from 'react'\n\nconst Wrapper = (props) =>{\n    return(\n        <div className=\"wrapper\">\n        { props.children }\n        </div>\n    )\n}\n\nexport default Wrapper;","import React from 'react'\n\nconst Header = () => (\n        <div className=\"header\">\n           <div className=\"header__title\">\n            Forecast Finder\n           </div>\n        </div>\n)\n\nexport default Header;","import React from 'react'\n\nconst Content = (props) => (\n        <div className=\"content\">\n            {props.children}\n        </div>\n)\n\nexport default Content;","import { createContext}  from 'react'\n\nconst Context = createContext();\nexport default Context;","import React, { useContext} from 'react'\nimport Context from \"../Context\"\n\nconst WeatherSearch = (props) => {\n        const {api_call} = useContext(Context)\n\n       return <div className=\"weather-search\">\n       <form onSubmit={api_call} className=\"weather-search__form\">\n         <input name=\"location\" autoComplete=\"off\" className=\"weather-search__input\" type=\"text\"/>\n         <div className=\"weather-search__submit\">\n           <button className=\"weather-search__button\">&rarr;</button>\n         </div>\n       </form>\n     </div>\n}\n\nexport default WeatherSearch ;","import React, { useContext } from 'react'\nimport Context from \"../Context\"\n\nconst WeatherData = () => {\n    const { weather,  city } = useContext(Context)\n    const { temp, humidity, pressure } = weather\n\n    return <>\n        <div className=\"weather-data\">\n        <p className=\"weather__tagline\">Weather forecast for <span className=\"weather-data__city\">{city}</span></p>\n        <div className=\"weather-data__box\">\n            <span className=\"weather-data__property\">\n            <p className=\"weather-data__title\">Temperature</p>\n            <p className=\"weather-data__value\">{temp}</p>\n            </span>\n            <span className=\"weather-data__property\">\n            <p className=\"weather-data__title\">Humidity</p>\n            <p className=\"weather-data__value\">{humidity}</p>\n            </span>\n            <span className=\"weather-data__property\">\n            <p className=\"weather-data__title\">Pressure</p>\n            <p className=\"weather-data__value\">{pressure}</p>\n            </span>\n        </div>\n        </div>\n    </>\n}\n\nexport default WeatherData;","import React from 'react'\n\nconst Error = ({error}) =>{\n    return <div>{error}</div>\n}\n\nexport default Error;","import React from 'react'\n\nconst Tagline = () =>{\n    return <div>Enter the name of your fav place</div>\n}\n\nexport default Tagline;","import React from 'react'\n\nconst DateTime = () => {\n    const date = new Date()\n\n    return(\n        <div className=\"date-time\">\n        { `${date.toLocaleDateString()} - ${date.toLocaleTimeString()}` }\n        </div>\n    )\n}\n\nexport default DateTime","import React from 'react'\n\nconst Footer = () =>{\n    return <div className=\"footer\">\n        <p>Designed and developed by Nisha Chaube\n        </p>\n    </div>\n}\n\nexport default Footer;","import React, { useState } from 'react'\nimport Header from './Header'\nimport Content from './Content'\nimport WeatherSearch from './WeatherSearch'\nimport axios from 'axios'\nimport WeatherData from './WeatherData'\nimport Context from '../Context'\nimport Error from './Error'\nimport Tagline from './Tagline'\nimport DateTime from './DateTime'\nimport Footer from './Footer'\n\nconst Main = () =>{\n    const [weather, setWeather] = useState()\n    const [ city, setCity ] = useState()\n    const [ error, setError ] = useState()\n\n    const api_call = async (e) => {\n        e.preventDefault()\n        const API_KEY=\"8de641d7fbe60e43fa9b85030f325f17\"\n        const location = e.target.elements.location.value\n        if(!location) return setError(\"This location doesn't exist on Earth üôÖüèª!\"), setWeather(null)\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${API_KEY}&units=metric`\n        const response = await axios.get(url)\n        setWeather(response.data.main)\n        setCity(response.data.name)\n        setError(null)\n    }\n  \n    return <div className=\"main\">\n            <Header/>\n            <Content>\n            <Tagline/>\n            <DateTime/>\n               <Context.Provider value={{ api_call, weather, city}}>\n               <WeatherSearch />\n                {weather && <WeatherData />}\n                {error && <Error error={error} /> }\n               </Context.Provider>\n               <Footer/>\n            </Content>\n        </div>\n}\n\nexport default Main;","import React from 'react';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\"\nimport Main from \"./components/Main\"\n\nfunction App() {\n  return (\n   <Wrapper>\n     <Main/>\n   </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"./styles/styles.scss\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}